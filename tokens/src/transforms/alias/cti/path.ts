import { TransformedToken } from 'style-dictionary/types';

import {
  FIGMA_TOKENS_CAT,
  TOKENS_CAT_PROP,
  TOKENS_CAT_VALUES,
  TOKENS_TIER,
} from '../../../constants';

/**
 * Get the figma tokens plugin token type: color, sizing, spacing... etc.
 *
 * @param path - The array generated by the token name, containing each name block
 */
export const getFigmaTokenType = (path: string[]) =>
  path.includes(TOKENS_CAT_PROP.COLOR.NAME)
    ? FIGMA_TOKENS_CAT.COLOR
    : path.includes(TOKENS_CAT_PROP.SHAPE.PROPS.BORDER_RADIUS)
    ? FIGMA_TOKENS_CAT.BORDER_RADIUS
    : path.includes(TOKENS_CAT_PROP.SIZE.NAME)
    ? FIGMA_TOKENS_CAT.SIZE
    : path.includes(TOKENS_CAT_PROP.SPACE.NAME)
    ? FIGMA_TOKENS_CAT.SPACE
    : path.includes(TOKENS_CAT_PROP.SHAPE.PROPS.BORDER_SIZE)
    ? FIGMA_TOKENS_CAT.BORDER_SIZE
    : path.includes(TOKENS_CAT_PROP.SHAPE.NAME) &&
      path.includes(TOKENS_CAT_PROP.SHAPE.PROPS.OPACITY)
    ? FIGMA_TOKENS_CAT.OPACITY
    : path.includes(TOKENS_CAT_PROP.ELEVATION.PROPS.BOX_SHADOW)
    ? FIGMA_TOKENS_CAT.BOX_SHADOW
    : path.includes(FIGMA_TOKENS_CAT.TYPO)
    ? FIGMA_TOKENS_CAT.TYPO
    : path.includes(TOKENS_CAT_PROP.TYPO.PROPS.FONT_SIZE)
    ? FIGMA_TOKENS_CAT.FONT_SIZE
    : path.includes(TOKENS_CAT_PROP.TYPO.PROPS.FONT_WEIGHT)
    ? FIGMA_TOKENS_CAT.FONT_WEIGHT
    : path.includes(TOKENS_CAT_PROP.TYPO.PROPS.LINE_HEIGHT)
    ? FIGMA_TOKENS_CAT.LINE_HEIGHT
    : path.includes(TOKENS_CAT_PROP.TYPO.PROPS.LETTER_SPACING)
    ? FIGMA_TOKENS_CAT.LETTER_SPACING
    : path.includes(TOKENS_CAT_PROP.TYPO.PROPS.FONT_FAMILY)
    ? FIGMA_TOKENS_CAT.FONT_FAMILY
    : path.includes(TOKENS_CAT_PROP.TYPO.PROPS.TEXT_TRANSFORM)
    ? FIGMA_TOKENS_CAT.TEXT_TRANSFORM
    : FIGMA_TOKENS_CAT.OTHER;

export const parsePath = (token: TransformedToken, paths: string[]) =>
  paths.reduce((acc, cur, idx) => ({ ...acc, [cur]: token.path[idx] }), {
    figmaType: getFigmaTokenType(token.path),
  });

export const getPaths = (token: TransformedToken) => {
  const isCmp = token.path[0] === TOKENS_TIER.CMP;
  const isAlias = token.path[0] === TOKENS_TIER.ALIAS;
  const isExportable = isCmp || isAlias;
  const hasElement = isExportable && TOKENS_CAT_VALUES.includes(token.path[3]);
  const hasGroup = isAlias && !TOKENS_CAT_VALUES.includes(token.path[1]);

  return [
    'tier',
    ...(isCmp ? ['component'] : []),
    ...(hasGroup ? ['group'] : []),
    ...(hasElement ? ['element'] : []),
    'category',
    'property',
    ...(isAlias && !hasGroup ? ['concept'] : []),
    'variant',
    'modifier',
  ];
};
